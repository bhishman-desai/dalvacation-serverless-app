AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a hotel booking system chatbot with AWS Lex and Lambda functions.

Parameters:
  RoleArn:
    Description: Existing IAM role ARN
    Type: String
    Default: arn:aws:iam::166633657396:role/LabRole
  DynamoDBTableName:
    Description: DynamoDB table name for room information
    Type: String
    Default: rooms
  GCPProjectId:
    Description: Google Cloud Platform Project ID
    Type: String
    Default: YOUR_PROJECT_ID

Resources:
  # Combined Lambda Function for Getting Room Information and Publishing Message to Agent
  ValidateAndStoreLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'validateAndStore'
      Handler: 'index.handler'
      Role: !Ref RoleArn
      Runtime: 'python3.8'
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key
          from google.cloud import pubsub_v1
          import os
          import random

          # Initialize DynamoDB resource
          dynamodb = boto3.resource('dynamodb')

          def validate_reference_number(reference_number):
              """
              Validates the reference number. It should be a 6-digit number.
              """
              return reference_number.isdigit() and len(reference_number) == 6

          def getRoom(event):
              """
              Handles the 'GetRoomDetailsIntent' by retrieving room information from DynamoDB.
              """
              table_name = os.environ['DYNAMODB_TABLE_NAME']
              table = dynamodb.Table(table_name)
              reference_number = event['currentIntent']['slots'].get('ReferenceNumber')

              if not reference_number:
                  return {
                      'dialogAction': {
                          'type': 'ElicitSlot',
                          'intentName': event['currentIntent']['name'],
                          'slots': event['currentIntent']['slots'],
                          'slotToElicit': 'ReferenceNumber',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'Please provide your booking reference number.'
                          }
                      }
                  }

              if not validate_reference_number(reference_number):
                  return {
                      'dialogAction': {
                          'type': 'ElicitSlot',
                          'intentName': event['currentIntent']['name'],
                          'slots': event['currentIntent']['slots'],
                          'slotToElicit': 'ReferenceNumber',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'The reference number is invalid. It should be a 6-digit number.'
                          }
                      }
                  }

              try:
                  response = table.get_item(Key={'reference_number': reference_number})
                  if 'Item' in response:
                      room_number = response['Item']['room_number']
                      duration = response['Item']['duration']
                      return {
                          'dialogAction': {
                              'type': 'Close',
                              'fulfillmentState': 'Fulfilled',
                              'message': {
                                  'contentType': 'PlainText',
                                  'content': f"Room number is {room_number} and the duration of stay is {duration} days."
                              }
                          }
                      }
                  else:
                      return {
                          'dialogAction': {
                              'type': 'Close',
                              'fulfillmentState': 'Failed',
                              'message': {
                                  'contentType': 'PlainText',
                                  'content': 'The reference number provided does not exist.'
                              }
                          }
                      }
              except Exception as e:
                  return {
                      'dialogAction': {
                          'type': 'Close',
                          'fulfillmentState': 'Failed',
                          'message': {
                              'contentType': 'PlainText',
                              'content': f"An error occurred: {str(e)}"
                          }
                      }
                  }

          def publishMessage(event):
              """
              Handles the 'PublishMessageToAgentIntent' by publishing a message to a random GCP Pub/Sub topic.
              """
              project_id = os.environ['GCP_PROJECT_ID']
              client = pubsub_v1.PublisherClient()
              topics = [topic.name for topic in client.list_topics(request={"project": f"projects/{project_id}"})]
              topic = random.choice(topics)
              topic_path = client.topic_path(project_id, topic.split('/')[-1])

              message = event['currentIntent']['slots'].get('Message')

              if not message:
                  return {
                      'dialogAction': {
                          'type': 'ElicitSlot',
                          'intentName': event['currentIntent']['name'],
                          'slots': event['currentIntent']['slots'],
                          'slotToElicit': 'Message',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'Please provide the message you want to send to the agent.'
                          }
                      }
                  }

              try:
                  future = client.publish(topic_path, message.encode('utf-8'))
                  future.result()
                  return {
                      'dialogAction': {
                          'type': 'Close',
                          'fulfillmentState': 'Fulfilled',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'Your message has been sent to the property agent.'
                          }
                      }
                  }
              except Exception as e:
                  return {
                      'dialogAction': {
                          'type': 'Close',
                          'fulfillmentState': 'Failed',
                          'message': {
                              'contentType': 'PlainText',
                              'content': f"An error occurred: {str(e)}"
                          }
                      }
                  }

          def handler(event, context):
              """
              Main handler function that routes the incoming request to the appropriate intent handler.
              """
              intent_name = event['currentIntent']['name']
              if intent_name == 'GetRoomDetailsIntent':
                  return getRoom(event)
              elif intent_name == 'PublishMessageToAgentIntent':
                  return publishMessage(event)
              else:
                  return {
                      'dialogAction': {
                          'type': 'Close',
                          'fulfillmentState': 'Failed',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'Invalid intent.'
                          }
                      }
                  }

      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
          GCP_PROJECT_ID: !Ref GCPProjectId

  # Lex Bot
  HotelBookingBot:
    DependsOn:
      - ValidateAndStoreLambdaFunction
    Type: AWS::Lex::Bot
    Properties:
      Name: "HotelBookingBot"
      RoleArn: !Ref RoleArn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      Description: "A bot to handle hotel bookings"
      BotLocales:
        - LocaleId: "en_US"
          Description: "English (US)"
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: "Ivy"
          Intents:
            - Name: "RegisterNavigationIntent"
              Description: "Provides basic navigation information"
              SampleUtterances:
                - Utterance: "How do I register?"
                - Utterance: "Can I know registration steps?"
              DialogCodeHook:
                Enabled: false
              IntentClosingSetting:
                ClosingResponse:
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Registration: Click Register Button on top right corner"
                  AllowInterrupt: true
            - Name: "FindBookingNavigationIntent"
              Description: "Provides basic navigation information"
              SampleUtterances:
                - Utterance: "How do I book a room?"
                - Utterance: "Where can I find the room booking option?"
              DialogCodeHook:
                Enabled: false
              IntentClosingSetting:
                ClosingResponse:
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Bookings: Click Book Room / Recreation Book"
                  AllowInterrupt: true
            - Name: "GetRoomDetailsIntent"
              Description: "Gets room number and duration of stay based on booking reference number"
              SampleUtterances:
                - Utterance: "What is my room number?"
                - Utterance: "How long is my stay?"
              DialogCodeHook:
                Enabled: true
              SlotPriorities:
                - Priority: 1
                  SlotName: "BookingReference"
              Slots:
                - Name: "BookingReference"
                  SlotTypeName: "AMAZON.AlphaNumeric"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Please provide your booking reference number."
                      MaxRetries: 3
                      AllowInterrupt: true
            - Name: "PublishMessageToAgentIntent"
              Description: "Publishes a message to a property agent"
              SampleUtterances:
                - Utterance: "I have an issue with my booking."
                - Utterance: "I need to talk to an agent."
              DialogCodeHook:
                Enabled: true
              SlotPriorities:
                - Priority: 1
                  SlotName: "MessageContent"
              Slots:
                - Name: "MessageContent"
                  SlotTypeName: "AMAZON.FreeFormInput"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Please describe your issue."
                      MaxRetries: 3
                      AllowInterrupt: true
            - Name: "FallbackIntent"
              Description: "Fallback intent when no other intent matches"
              ParentIntentSignature: "AMAZON.FallbackIntent"
              IntentClosingSetting:
                ClosingResponse:
                  MessageGroupsList:
                    - Message:
                        PlainTextMessage:
                          Value: "Sorry, I didn't understand that. Can you rephrase your question?"
                      Variations:
                        - PlainTextMessage:
                            Value: "I apologize, but I didn't get that. Could you ask differently?"
                        - PlainTextMessage:
                            Value: "I'm having trouble understanding. Please try again."
                  AllowInterrupt: true

  # Lex Bot Version
  HotelBookingBotVersion:
    DependsOn: HotelBookingBot
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref HotelBookingBot
      BotVersionLocaleSpecification:
        - LocaleId: "en_US"
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: "Chat Bot Version"

  # Lex Bot Alias
  HotelBookingBotAlias:
    DependsOn:
      - HotelBookingBotVersion
      - LogGroup
    Type: AWS::Lex::BotAlias
    Properties:
      BotAliasName: "ProdAlias"
      BotId: !Ref HotelBookingBot
      BotVersion: !GetAtt HotelBookingBotVersion.BotVersion
      BotAliasLocaleSettings:
        - LocaleId: "en_US"
          BotAliasLocaleSetting:
            CodeHookSpecification:
              LambdaCodeHook:
                CodeHookInterfaceVersion: "1.0"
                LambdaArn: !GetAtt ValidateAndStoreLambdaFunction.Arn
            Enabled: true
      ConversationLogSettings:
        TextLogSettings:
          - Enabled: true
            Destination:
              CloudWatch:
                CloudWatchLogGroupArn: !GetAtt LogGroup.Arn
                LogPrefix: "HotelBookingBotLogs"
      Description: "Production alias for the Hotel Booking Bot"

  # Lex Bot Logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lex/HotelBookingBot"
      RetentionInDays: 14

Outputs:
  LexBotName:
    Description: 'Name of the Lex Bot'
    Value: !Ref HotelBookingBot
  LexBotAliasName:
    Description: 'Alias Name of the Lex Bot'
    Value: !Ref HotelBookingBotAlias
