AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a hotel booking system chatbot with AWS Lex and Lambda functions.

Parameters:
  RoleArn:
    Description: Existing IAM role ARN
    Type: String
    Default: arn:aws:iam::166633657396:role/LabRole

Resources:
  # Lambda Function for Getting Room Information
  GetRoomLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'getRoom'
      Handler: 'index.getRoom'
      Role: !Ref RoleArn
      Runtime: 'python3.8'
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key

          def validate_reference_number(reference_number):
              if reference_number.isdigit() and len(reference_number) == 6:
                  return True
              return False

          def getRoom(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('rooms')
          
              reference_number = event['currentIntent']['slots'].get('ReferenceNumber')
          
              if not reference_number:
                  return {
                      'dialogAction': {
                          'type': 'ElicitSlot',
                          'intentName': event['currentIntent']['name'],
                          'slots': event['currentIntent']['slots'],
                          'slotToElicit': 'ReferenceNumber',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'Please provide your booking reference number.'
                          }
                      }
                  }
          
              if not validate_reference_number(reference_number):
                  return {
                      'dialogAction': {
                          'type': 'ElicitSlot',
                          'intentName': event['currentIntent']['name'],
                          'slots': event['currentIntent']['slots'],
                          'slotToElicit': 'ReferenceNumber',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'The reference number is invalid. It should be a 6-digit number.'
                          }
                      }
                  }
          
              try:
                  response = table.get_item(Key={'reference_number': reference_number})
                  if 'Item' in response:
                      room_number = response['Item']['room_number']
                      duration = response['Item']['duration']
                      return {
                          'dialogAction': {
                              'type': 'Close',
                              'fulfillmentState': 'Fulfilled',
                              'message': {
                                  'contentType': 'PlainText',
                                  'content': f"Room number is {room_number} and the duration of stay is {duration} days."
                              }
                          }
                      }
                  else:
                      return {
                          'dialogAction': {
                              'type': 'Close',
                              'fulfillmentState': 'Failed',
                              'message': {
                                  'contentType': 'PlainText',
                                  'content': 'The reference number provided does not exist.'
                              }
                          }
                      }
              except Exception as e:
                  return {
                      'dialogAction': {
                          'type': 'Close',
                          'fulfillmentState': 'Failed',
                          'message': {
                              'contentType': 'PlainText',
                              'content': f"An error occurred: {str(e)}"
                          }
                      }
                  }

  # Lambda Function for Publishing Message to Agent
  PublishMessageLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'publishMessage'
      Handler: 'index.publishMessage'
      Role: !Ref RoleArn
      Runtime: 'python3.8'
      Code:
        ZipFile: |
          import json
          from google.cloud import pubsub_v1
          import random

          def publishMessage(event, context):
              client = pubsub_v1.PublisherClient()
              project_id = 'YOUR_PROJECT_ID'
              topics = ['agent-topic1', 'agent-topic2', 'agent-topic3']
              topic = random.choice(topics)
              topic_path = client.topic_path(project_id, topic)
          
              message = event['currentIntent']['slots'].get('Message')
          
              if not message:
                  return {
                      'dialogAction': {
                          'type': 'ElicitSlot',
                          'intentName': event['currentIntent']['name'],
                          'slots': event['currentIntent']['slots'],
                          'slotToElicit': 'Message',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'Please provide the message you want to send to the agent.'
                          }
                      }
                  }
          
              try:
                  future = client.publish(topic_path, message.encode('utf-8'))
                  future.result()
                  return {
                      'dialogAction': {
                          'type': 'Close',
                          'fulfillmentState': 'Fulfilled',
                          'message': {
                              'contentType': 'PlainText',
                              'content': 'Your message has been sent to the property agent.'
                          }
                      }
                  }
              except Exception as e:
                  return {
                      'dialogAction': {
                          'type': 'Close',
                          'fulfillmentState': 'Failed',
                          'message': {
                              'contentType': 'PlainText',
                              'content': f"An error occurred: {str(e)}"
                          }
                      }
                  }

  # Lex Bot
  HotelBookingBot:
    DependsOn:
      - GetRoomLambdaFunction
      - PublishMessageLambdaFunction
    Type: AWS::Lex::Bot
    Properties:
      Name: "HotelBookingBot"
      RoleArn: !Ref RoleArn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      Description: "A bot to handle hotel bookings"
      BotLocales:
        - LocaleId: "en_US"
          Description: "English (US)"
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: "Ivy"
          Intents:
            - Name: "BasicNavigationIntent"
              Description: "Provides basic navigation information"
              SampleUtterances:
                - Utterance: "How do I register?"
                - Utterance: "Where can I find my bookings?"
                - Utterance: "How do I reset my password?"
              DialogCodeHook:
                Enabled: true
            - Name: "GetRoomDetailsIntent"
              Description: "Gets room number and duration of stay based on booking reference number"
              SampleUtterances:
                - Utterance: "What is my room number?"
                - Utterance: "How long is my stay?"
              DialogCodeHook:
                Enabled: true
              SlotPriorities:
                - Priority: 1
                  SlotName: "BookingReference"
              Slots:
                - Name: "BookingReference"
                  SlotTypeName: "AMAZON.AlphaNumeric"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Please provide your booking reference number."
                      MaxRetries: 3
                      AllowInterrupt: true
            - Name: "PublishMessageToAgentIntent"
              Description: "Publishes a message to a property agent"
              SampleUtterances:
                - Utterance: "I have an issue with my booking."
                - Utterance: "I need to talk to an agent."
              DialogCodeHook:
                Enabled: true
              SlotPriorities:
                - Priority: 1
                  SlotName: "MessageContent"
              Slots:
                - Name: "MessageContent"
                  SlotTypeName: "AMAZON.FreeFormInput"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "Please describe your issue."
                      MaxRetries: 3
                      AllowInterrupt: true
            - Name: "FallbackIntent"
              Description: "Fallback intent when no other intent matches"
              ParentIntentSignature: "AMAZON.FallbackIntent"

Outputs:
  LexBotName:
    Description: 'Name of the Lex Bot'
    Value: !Ref HotelBookingBot
