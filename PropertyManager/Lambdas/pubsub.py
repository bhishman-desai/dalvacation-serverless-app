import jsonimport boto3import osimport requests# Initialize DynamoDB resourcedynamodb = boto3.resource('dynamodb')BOOKINGS_TABLE_NAME = os.environ['BOOKING_TABLE_NAME']Client_Id = os.environ['clientId']messagesList = []def lambda_handler(event, context):    try:        print("Received event:", json.dumps(event))        body = json.loads(event['body'])        # Extract booking reference and complaint from Dialogflow request        booking_reference = body['queryResult']['parameters'].get('booking_reference')        complaint = body['queryResult']['parameters'].get('complaint')        description = body['queryResult']['parameters'].get('description')        intent = body['queryResult']['intent']['displayName']        print(intent)        if booking_reference is not None:            # Fetch booking details from DynamoDB            table = dynamodb.Table(BOOKINGS_TABLE_NAME)            response = table.get_item(Key={'bookingReference': booking_reference})            booking = response.get('Item')            # Prepare fulfillment text based on booking details            if not booking:                fulfillment_text = "Booking details not found for the provided reference."            else:                username = booking.get('username')                startDate = booking.get('startDate')                endDate = booking.get('endDate')                fulfillment_text = (                    f"Booking details for reference {booking_reference}: "                    f"Username: {username}, Room is booked from {startDate} to {endDate}."                )            # Prepare JSON response for Dialogflow            response = {                "fulfillmentText": fulfillment_text            }            return {                'statusCode': 200,                'body': json.dumps(response)            }        elif complaint is not None:            myobj = {                "body": {                    "clientId": Client_Id,                    "complaint": complaint                }            }            post_response = requests.post("https://blrtx8kmh8.execute-api.us-east-1.amazonaws.com/prod/publish", json=myobj)            if post_response.status_code == 200:                # If POST request is successful, prepare response for Dialogflow                response = {                    "fulfillmentText": "Complaint Registered and One of the Property Agents will connect with you shortly"                }            else:                # If POST request failed, prepare error response for Dialogflow                response = {                    "fulfillmentText": "Failed to register complaint. Please try again later.",                    "error": f"API call failed with status code {post_response.status_code}"                }            return {                'statusCode': 200,                'body': json.dumps(response)            }        elif description is not None:            myobj = {                "message": description            }            post_response = requests.post("https://us-central1-serverless-426417.cloudfunctions.net/chatFunction", json=myobj)            if post_response.status_code == 200:                # If POST request is successful, prepare response for Dialogflow                response = {                    "fulfillmentText": "Your complaint details have been sent to our property agent. We will look into that issue ASAP. Sorry for the inconvenience."                }            else:                # If POST request failed, prepare error response for Dialogflow                response = {                    "fulfillmentText": "Failed to send complaint details. Please try again later.",                    "error": f"API call failed with status code {post_response.status_code}"                }            return {                'statusCode': 200,                'body': json.dumps(response)            }        elif intent == "Fetch Messages":            url = "https://us-central1-serverless-426417.cloudfunctions.net/chatFunction"            try:                # Setting a timeout of 30 seconds                get_response = requests.get(url, timeout=30)                get_response.raise_for_status()                if get_response.status_code == 200:                    messages = get_response.json().get('message')                    messagesList.extend(messages)                    response = {                        "fulfillmentText": "Fetching your messages. Please wait a moment."                    }                else:                    response = {                        "fulfillmentText": "Failed to fetch messages. Please try again later.",                        "error": f"API call failed with status code {get_response.status_code}"                    }            except requests.exceptions.Timeout:                response = {                    'statusCode': 504,                    'body': json.dumps({'error': 'The request timed out'})                }            except requests.exceptions.RequestException as e:                response = {                    'statusCode': 500,                    'body': json.dumps({'error': str(e)})                }            return {                'statusCode': 200,                'body': json.dumps(response)            }        elif intent == "Display messages":            print(messagesList)            if len(messagesList) == 0:                response = {                    "fulfillmentText": " No messages in the queue to display."                }            else:                # Join all messages with newline separator                all_messages = "\n".join(messagesList)                messagesList.clear()                response = {                    "fulfillmentText": f"Here are your messages:\n{all_messages}"                }            return {                'statusCode': 200,                'body': json.dumps(response)            }        else:            return {                'statusCode': 400,                'body': json.dumps({"fulfillmentText": "Invalid request: Missing booking reference, complaint, or description"})            }    except Exception as e:        # Handle exceptions and prepare error response for Dialogflow        fulfillment_text = "An error occurred while processing the request."        response = {            "fulfillmentText": fulfillment_text,            "error": str(e)        }        return {            'statusCode': 500,            'body': json.dumps(response)        }