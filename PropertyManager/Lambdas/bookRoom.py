import jsonimport boto3import os# Initialize clientsdynamodb = boto3.resource('dynamodb')sns = boto3.client('sns')# Retrieve environment variablesTABLE_NAME = os.environ['TABLE_NAME']CONFIRMATION_TOPIC_ARN = os.environ['CONFIRMATION_TOPIC_ARN']FAILURE_TOPIC_ARN = os.environ['FAILURE_TOPIC_ARN']def lambda_handler(event, context):    table = dynamodb.Table(TABLE_NAME)    for record in event['Records']:        try:            # Parse SQS message            message = json.loads(record['body'])            customerId = message['customerId']            roomId = message['roomId']            startDate = message['startDate']            endDate = message['endDate']            # Check room availability            response = table.get_item(Key={'roomid': roomId})            room = response.get('Item')            if not room:                raise Exception('Room does not exist.')            bookings = room.get('bookings', [])            # Check for date overlap with existing bookings            for booking in bookings:                if not (endDate <= booking['startDate'] or startDate >= booking['endDate']):                    raise Exception('Room is not available for the selected dates.')            # Add the new booking to the list            bookings.append({                'customerId': customerId,                'startDate': startDate,                'endDate': endDate,                'bookingStatus': 'Booked'            })            # Update room with new booking information            update_expression = "set bookings = :b"            expression_attribute_values = {                ':b': bookings            }            table.update_item(                Key={'roomid': roomId},                UpdateExpression=update_expression,                ExpressionAttributeValues=expression_attribute_values,                ReturnValues="UPDATED_NEW"            )            # Send booking confirmation notification            sns.publish(                TopicArn=CONFIRMATION_TOPIC_ARN,                Message=json.dumps({                    'customerId': customerId,                    'roomId': roomId,                    'startDate': startDate,                    'endDate': endDate,                    'status': 'Confirmed'                })            )            return {                'statusCode': 200,                'body': json.dumps('Room booking processed.')            }        except Exception as e:            # Send booking failure notification            sns.publish(                TopicArn=FAILURE_TOPIC_ARN,                Message=json.dumps({                    'error': str(e),                    'customerId': customerId,                    'roomId': roomId,                    'startDate': startDate,                    'endDate': endDate                })            )            return {                'statusCode': 400,                'body': json.dumps(f'Error processing booking: {str(e)}')            }